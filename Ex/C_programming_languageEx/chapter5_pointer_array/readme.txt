5-1：在上面的例子中，如果符号+或—后面紧跟的不是数字，getint函数将把符号视为数字0的有效表达式。修改该函数，将这种形式的+或－符号重新写回到输入流中。
5-2：模仿函数getint的实现方法，编写一个读取浮点数的函数getfloat。getfloat函数的返回值应该是什么类型？
5-3：用指针的方式实现第2章中的函数strcat。函数strcat(s, t)将t指向的字符串复制到s指向的字符串的尾部
5-4：编写函数strend(s, t), 如果字符串t出现在字符串s的尾部，该函数返回1，否则返回0
5-5：实现库函数strncpy, strncat, strncmp，它们最多对参数字符串中的前n个字符进行操作。例如：函数strncpy(s, t, n)
     将t中最多前n个字符复制到s中，更详细的说明请参见附录B
5-6：采用指针而非数组索引的方式改写前面章节和练习中的某些程序，例如：getline(1章, 4章), atoi, itoa以及它们的变体形式(2, 3, 4)	 
	 reverse(3), strindex, getop(4)等等
5-7：重写函数readlines，将输入的文本行存储到由main函数提供的一个数组中，而不是存储到alloc分配的空间中。
     该函数的运行速度比改写前快多少？
5-8：函数day_of_year和month_day中没有进行错误检查，请解决该问题
5-9：用指针的方式代替数组下标方式改写函数day_of_year, month_day
5-10：编写程序expr, 以计算从命令行输入的逆波兰表达式的值，其中每个运算符或操作数用一个单独的参数表示。例如：
	  expr 2 3 4 + *，将计算2*(3+4)
5-11：修改程序entab, detab(第一章练习题编写的函数)，使它接受一组作为参数的制表符停止位。如果启动程序时不带参数
	  则使用默认的制表符停止位的设置
5-12: 对程序entab, detab的功能做一些扩充，以接受下列缩写的命令：
	  entab -m +n
	  表示制表符从第m列开始，每隔n列停止。选择(对使用者而言)比较方便的默认行为
5-13：编写程序tail，将其输入中的最后n行打印出来。默认情况下，n的值为10，但可以通过一个可选参数改变n的值，因此，命令：
	  tail -n
	  将打印其输入的最后n行。无论输入或n的值是否合理，该程序都能正常运行。编写的程序要充分利用存储空间；输入的存储方式
	  应该同5.6节中排序程序的存储方式一样，而不采用固定长度的二维数组。